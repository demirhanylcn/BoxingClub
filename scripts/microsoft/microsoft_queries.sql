/*
CALCULATE THE NUMBER OF BOXERS EACH TRAINER IS MANAGING AND PRESENTS THEIR IDS,
FIRST NAMES, LAST NAMES, AND THE COUNT OF BOXERS THEY TRAIN.
*/
SELECT T.ID        AS "TRAINER ID",
       T.NAME      AS "TRAINER NAME",
       T.SURNAME   AS "TRAINER SURNAME",
       COUNT(B.ID) AS "TRAINER OF BOXERS"
FROM TRAINER T
         LEFT JOIN BOXER B ON T.ID = B.TRAINER_ID
GROUP BY T.ID, T.NAME, T.SURNAME;


/*
LIST BOXERS WHO HAVE NEVER HAD A DRAW IN THEIR RECORDS, DISPLAYING THEIR IDS, NAMES, AND SURNAMES.
*/
SELECT B.ID      AS "BOXER ID",
       B.NAME    AS "BOXER NAME",
       B.SURNAME AS "BOXER SURNAME"
FROM BOXER B
         JOIN RECORD R ON B.ID = R.ID
WHERE R.DRAW = 0;

/*
LIST UPCOMING MATCHES, SHOWING THEIR IDS, DATES, WEIGHT CLASSES,
AND THE NAMES OF THE TWO BOXERS, FILTERING FOR MATCHES SCHEDULED IN THE FUTURE.
*/
SELECT M.ID         AS "MATCH ID",
       M.MATCH_DATE AS "MATCH DATE",
       WC.NAME      AS "BOXER CLASS",
       B1.NAME      AS "BOXER 1",
       B2.NAME      AS "BOXER 2"
FROM MATCH M
         JOIN WEIGHT_CLASS WC ON M.WEIGHT_CLASS_ID = WC.ID
         JOIN BOXER B1 ON M.BOXER_1_ID = B1.ID
         JOIN BOXER B2 ON M.BOXER_2_ID = B2.ID
WHERE M.MATCH_DATE > GETDATE();

/*
GET INFORMATION ABOUT BOXERS WHO ARE CURRENTLY SPONSORED BY 'NUTRITION PLUS.'
IT PROVIDES DETAILS SUCH AS THEIR UNIQUE IDS, FIRST NAMES,
AND LAST NAMES TO GIVE A COMPREHENSIVE VIEW OF THE SPONSORED BOXERS.
*/
SELECT B.ID      AS "BOXER ID",
       B.NAME    AS "BOXER NAME",
       B.SURNAME AS "BOXER SURNAME"
FROM BOXER B
         JOIN BOXER_SPONSOR BS ON B.ID = BS.BOXER_ID
         JOIN SPONSOR S ON BS.SPONSOR_ID = S.ID
WHERE S.NAME = 'Nutrition Plus';

/*
CALCULATE THE AVERAGE AGE OF BOXERS WITHIN EACH WEIGHT CLASS,
PRESENTING WEIGHT CLASS NAMES ALONG WITH THEIR CORRESPONDING
AVERAGE AGES BASED ON THE CURRENT YEAR AND THE BOXERS' BIRTH DATES.
*/

SELECT WC.NAME                            AS "WEIGHT CLASS",
       AVG(YEAR(GETDATE()) - YEAR(B.AGE)) AS "AVERAGE AGE"
FROM BOXER B
         JOIN WEIGHT_CLASS WC ON B.WEIGHT_CLASS_ID = WC.ID
GROUP BY WC.NAME;


/*
 INSTRUCTION 1: CALCULATE AVERAGE SALARY AMONG BOXERS
 INSTRUCTION 2: PREPARE TO COMPARE EACH BOXER'S SALARY WITH THE AVERAGE
 INSTRUCTION 3: DISPLAY BOXERS EARNING LESS THAN AVERAGE SALARY
 INSTRUCTION 4: GO ONE BY ONE EACH BOXER AND GET THEIR SALARY
 INSTRUCTION 5: IF BOXER EARNS LESS THAN AVERAGE ADD ONE RANDOM SPONSOR TO BOXER
 INSTRUCTION 6: IF THERE IS NO SPONSOR LEFT FOR BOXER, LET USER KNOW.
 */

CREATE PROCEDURE FIND_BELOW_AVERAGE_AND_HELP
AS
BEGIN
    DECLARE @AVERAGE_SALARY DECIMAL(10, 2);
    SELECT @AVERAGE_SALARY = AVG(S.MONEY)
    FROM SPONSOR S
             JOIN BOXER_SPONSOR BS ON S.ID = BS.SPONSOR_ID
             JOIN BOXER B ON BS.BOXER_ID = B.ID;
    PRINT 'AVERAGE SALARY: ' + CAST(@AVERAGE_SALARY AS VARCHAR(20));

    DECLARE @CURRENT_BOXERS_SALARY DECIMAL(10, 2);
    DECLARE @CURRENT_BOXER_ID INT;
    DECLARE BOXER_CURSOR CURSOR FOR
        SELECT DISTINCT ID FROM BOXER;
    OPEN BOXER_CURSOR;
    FETCH NEXT FROM BOXER_CURSOR INTO @CURRENT_BOXER_ID;

     SELECT B.ID, B.NAME, SUM(S.MONEY) AS SALARY
    FROM BOXER B
             INNER JOIN BOXER_SPONSOR BS ON B.ID = BS.BOXER_ID
             INNER JOIN SPONSOR S ON BS.SPONSOR_ID = S.ID
    GROUP BY B.ID, B.NAME
    HAVING SUM(S.MONEY) < @AVERAGE_SALARY;

    WHILE @@FETCH_STATUS = 0
        BEGIN
            SELECT @CURRENT_BOXERS_SALARY = SUM(S2.MONEY)
            FROM SPONSOR S2
                     JOIN BOXER_SPONSOR BS2 ON S2.ID = BS2.SPONSOR_ID
                     JOIN BOXER B2 ON BS2.BOXER_ID = B2.ID
            WHERE B2.ID = @CURRENT_BOXER_ID;

            IF @CURRENT_BOXERS_SALARY < @AVERAGE_SALARY
                BEGIN
                    PRINT 'CURRENT BOXER''S SALARY: ' + CAST(@CURRENT_BOXERS_SALARY AS VARCHAR(100)) +
                          ' IS LOWER THAN AVERAGE. ONE RANDOM SPONSOR WILL BE ASSIGNED TO BALANCE IT.';

                    DECLARE @RANDOM_SPONSOR INT;
                    SELECT TOP 1 @RANDOM_SPONSOR = ID
                    FROM SPONSOR
                    WHERE ID NOT IN (SELECT SPONSOR_ID FROM BOXER_SPONSOR WHERE BOXER_ID = @CURRENT_BOXER_ID)
                    ORDER BY NEWID();

                    IF @RANDOM_SPONSOR IS NOT NULL
                        BEGIN
                            DECLARE @LAST_ID INT;
                            SELECT @LAST_ID = ISNULL(MAX(ID), 0) FROM BOXER_SPONSOR;

                            INSERT INTO BOXER_SPONSOR(ID, BOXER_ID, SPONSOR_ID, SIGNING_DATE)
                            VALUES (@LAST_ID + 1, @CURRENT_BOXER_ID, @RANDOM_SPONSOR, GETDATE());
                            PRINT 'RANDOM SPONSOR WITH ID ' + CAST(@RANDOM_SPONSOR AS VARCHAR(100)) + ' ADDED TO BOXER.';
                        END
                    ELSE
                        BEGIN
                            PRINT 'NO AVAILABLE SPONSOR FOUND FOR BOXER ID ' + CAST(@CURRENT_BOXER_ID AS VARCHAR(10));
                        END
                END;

            FETCH NEXT FROM BOXER_CURSOR INTO @CURRENT_BOXER_ID;
        END;

    CLOSE BOXER_CURSOR;
    DEALLOCATE BOXER_CURSOR;


END;
GO

EXEC FIND_BELOW_AVERAGE_AND_HELP;


/*
    INSTRUCTION 1 : GET TRAINER ID ONE BY ONE
    INSTRUCTION 2 : FIND ALL BOXERS ASSIGNED TO THAT TRAINER
    INSTRUCTION 3 : SUM ALL WINS THAT TRAINER'S BOXER HAS AND PRINT TO CONSOLE
*/


CREATE PROCEDURE FIND_TRAINERS_SUCCESS
AS
BEGIN
    DECLARE @TRAINER_ID INT, @WIN_COUNT INT;

    DECLARE TRAINER_CURSOR CURSOR FOR
        SELECT DISTINCT TRAINER.ID
        FROM TRAINER
                 INNER JOIN BOXER ON TRAINER.ID = BOXER.TRAINER_ID;

    OPEN TRAINER_CURSOR;
    FETCH NEXT FROM TRAINER_CURSOR INTO @TRAINER_ID;

    WHILE @@FETCH_STATUS = 0 -- 1 IS ERROR, 0 IS SUCCESS
        BEGIN
            SELECT @WIN_COUNT = SUM(WINS)
            FROM RECORD
                     INNER JOIN BOXER ON RECORD.ID = BOXER.ID
            WHERE BOXER.TRAINER_ID = @TRAINER_ID;


            PRINT 'TRAINER ID: ' + CAST(@TRAINER_ID AS VARCHAR(100)) + ', WIN COUNT: ' + CAST(@WIN_COUNT AS VARCHAR(100));


            FETCH NEXT FROM TRAINER_CURSOR INTO @TRAINER_ID;
        END;

    CLOSE TRAINER_CURSOR;
    DEALLOCATE TRAINER_CURSOR;
END
GO

EXEC FIND_TRAINERS_SUCCESS;

/*
INSTRUCTION 1: CHECK NEWLY ADDED BOXER HAS SPONSOR OR NOT
INSTRUCTION 2: IF NOT, FIRST GET CURRENT DATE.
INSTRUCTION 3: SECOND GET LAST BOXER_SPONSOR COUNT TO DETERMINE LAST ID.
INSTRUCTION 4: ADD NEW BOXER RANDOM SPONSOR.
*/

CREATE TRIGGER INSERT_RANDOM_SPONSOR_TO_NEWBIE
    ON BOXER
    AFTER INSERT
    AS
BEGIN
    DECLARE @BOXER_ID INT
    DECLARE @LAST_BOXER_SPONSOR_ID INT
    DECLARE @CURRENT_DATE VARCHAR(10)
    DECLARE @RANDOM_SPONSOR INT

    SELECT @BOXER_ID = ID FROM INSERTED

    SELECT TOP 1 @RANDOM_SPONSOR = ID
    FROM SPONSOR
    ORDER BY NEWID();

    IF NOT EXISTS (SELECT 1 FROM BOXER_SPONSOR WHERE BOXER_ID = @BOXER_ID)
        BEGIN
            SELECT @CURRENT_DATE = CONVERT(VARCHAR(10), GETDATE(), 120);
            SELECT @LAST_BOXER_SPONSOR_ID = ISNULL(MAX(ID), 0) FROM BOXER_SPONSOR;

            INSERT INTO BOXER_SPONSOR (ID, BOXER_ID, SPONSOR_ID, SIGNING_DATE)
            VALUES (@LAST_BOXER_SPONSOR_ID + 1, @BOXER_ID, @RANDOM_SPONSOR, @CURRENT_DATE)

        END
END;
GO


    INSERT INTO BOXER (ID, Name, Surname, Age, Weight, Weight_Class_ID, Trainer_ID)
    VALUES (12, 'TEST', 'TEST', GETDATE(), 111.1, 1, 1);

/*
 INSTRUCTION 1: WE SELECT A NUMBER TO LIMIT BOXER'S SPONSOR COUNT.
 INSTRUCTION 2: AFTER INSERT PROCESS WE GET THE COUNT OF BOXER'S SPONSOR.
 INSTRUCTION 3: WE CHECK IF BOXER HAS MORE THAN LIMIT. IF THAT IS THE CASE WE LET THE USER KNOW, AND ROLLBACK INSERT.
 */
    CREATE TRIGGER LIMIT_SPONSORS_PER_BOXER
        ON BOXER_SPONSOR
        AFTER INSERT
        AS
    BEGIN
        DECLARE @BOXER_ID INT, @SPONSOR_COUNT INT, @MAX_SPONSOR INT = 4;

        SELECT @BOXER_ID = Boxer_ID FROM INSERTED;
        SELECT @SPONSOR_COUNT = COUNT(*) FROM BOXER_SPONSOR WHERE Boxer_ID = @BOXER_ID;

        IF @SPONSOR_COUNT > @MAX_SPONSOR
            BEGIN
                RAISERROR ('THIS BOXER ALREADY HAS %d SPONSORS. NO MORE SPONSORS ARE ALLOWED.', 1, 1, @MAX_SPONSOR)
                ROLLBACK;
            END

    END;
GO
        INSERT INTO BOXER_SPONSOR
        VALUES (13, 11, 1, GETDATE());
